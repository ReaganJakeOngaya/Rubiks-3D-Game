#  Rubik's Cube 3D - Interactive Web Application

## Overview

Rubik's Cube 3D is a fully-featured, interactive 3D puzzle game built with modern web technologies. This application provides a realistic Rubik's Cube simulation with smooth animations, intuitive controls, and comprehensive game features. Built using Three.js for 3D rendering, it offers an immersive puzzle-solving experience directly in your web browser.

## Features

### Core Gameplay
- Realistic 3D Cube: Authentic 3x3 Rubik's Cube simulation with smooth animations
- Face Rotations: Complete control over all six faces (U, D, L, R, F, B)
- Win Detection: Automatic detection when the cube is solved
- Move Counter: Tracks total moves made during gameplay

### Game Management
- Real-time Timer: Precise timing with millisecond accuracy
- Statistics Tracking: Best time and games won statistics with local storage persistence
- Pause/Resume: Ability to pause and resume gameplay
- Reset Functionality: Complete game state reset

### Control Systems
- Mouse Controls: Click and drag to rotate the 3D view, mouse wheel to zoom
- Button Interface: Intuitive face rotation buttons
- Keyboard Shortcuts: Comprehensive keyboard controls for efficient gameplay
- Touch Support: Full touch gesture support for mobile devices

### Visual Experience
- Enhanced Lighting: Multiple directional lights with shadows for realistic rendering
- Premium Materials: Physically-based materials with clearcoat effects
- Smooth Animations: Eased animations with cubic bezier timing functions
- Responsive Design: Adapts to desktop, tablet, and mobile screens

## Technical Implementation

### Architecture
- Frontend: Pure HTML5, CSS3, and JavaScript (ES6+ modules)
- 3D Engine: Three.js for WebGL rendering
- UI Framework: Custom CSS with modern design principles
- Storage: LocalStorage for persistent statistics

### 3D Rendering System
```javascript
// Enhanced cubelet creation with rounded edges
function createCubelet(x, y, z) {
  const materials = Array(6).fill(blackMaterial).map(m => m.clone());
  
  // Apply colors only to outer faces
  if (x === 1) materials[0] = createMaterialsArray()[0]; // Right - white
  if (x === -1) materials[1] = createMaterialsArray()[1]; // Left - yellow
  // ... additional face assignments
}
```

### Animation Engine
Smooth Rotatio: Uses quaternion slerp for fluid face rotations
Easing Functio: Cubic easing for natural movement
Group-based Rotati: Temporary grouping for face rotation animations
Performance Optimiz: Efficient rendering with high-performance WebGL settings

## How to Play

### Basic Controls
Rotate Vi: Click and drag anywhere on the cube to rotate the 3D view
Zo: Use mouse wheel or pinch gesture on touch devices
Rotate Fac: Click face buttons or use keyboard shortcuts

### Face Rotation Notation
- U (Up): Rotates the top face clockwise
- D (Down): Rotates the bottom face clockwise
- L (Left): Rotates the left face clockwise
- R (Right): Rotates the right face clockwise
- F (Front): Rotates the front face clockwise
- B (Back): Rotates the back face clockwise

### Keyboard Shortcuts
| Key                |                  Action |
|--------------------|-------------------------|
| `U, D, L, R, F, B` | Rotate respective faces |
| `Spacebar`         | Pause/Resume game       |
| `S`                | Scramble cube           |
| `Enter`            | Solve cube instantly    |

### Color Scheme & Orientation
The cube follows standard color orientation:
- White: Right face
- Yellow: Left face
- Red: Top face
- Orange: Bottom face
- Blue: Front face
- Green: Back face

## Game Statistics

### Tracked Metrics
- Move Count: Total rotations performed
- Best Time: Fastest solve time (persistent)
- Games Won: Total completed solves (persistent)
- Current Time: Real-time solving timer

### Win Conditions
- All six faces must have uniform colors
- Automatic detection triggers win celebration
- Statistics are updated immediately upon solving

##  Technical Details

### Three.js Implementation
- Renderer : WebGLRenderer with antialiasing and transparency
- Camera: PerspectiveCamera with orbit controls
- Lighting: Multiple directional lights with shadow mapping
- Materials: MeshPhysicalMaterial with clearcoat effects
- Geometry: Custom cubelet geometry with edge highlighting

### Performance Optimizations
- Efficient Rendering: High-performance WebGL context
- Smart Updates: Only necessary re-renders
- Memory Management: Proper cleanup of Three.js objects
- Animation Optimization: RequestAnimationFrame with proper timing

### Browser Compatibility
- Modern Browsers: Chrome, Firefox, Safari, Edge
- Mobile Support: iOS Safari, Android Chrome
- Requirements: WebGL support, ES6+ compatibility

##  UI/UX Design

### Visual Design Principles
- Dark Theme: Reduced eye strain during extended play
- Glass Morphism: Semi-transparent panels with backdrop blur
- Gradient Accents: Vibrant color gradients for visual interest
- Smooth Transitions: All interactions include polished animations

### Responsive Layout
- Desktop: Side-by-side control panels
- Tablet: Optimized spacing and touch targets
- Mobile: Stacked interface with larger touch areas

## Installation & Usage

### Quick Start
1. Download both `index.html` and `style.css` files
2. Ensure both files are in the same directory
3. Open `index.html` in a modern web browser
4. No additional dependencies required!

### File Structure
```
rubiks-cube-3d/
├── index.html          # Main application file
└── style.css           # Styles and responsive design
```

### Dependencies
- Three.js: Loaded via CDN (version 0.128.0)
- No Build Proces: Runs directly in browser
- External Assets**: None - completely self-contained

## Game States & Flow

### State Management
1. Initialization: Cube loads in solved state, auto-scrambles
2. Active Play: Timer running, moves being counted
3. Paused: Game frozen, controls disabled
4. Solved: Win condition met, statistics updated
5. Reset: Return to initial state

### Game Flow
```
Start → Scramble → Play → [Pause/Resume] → Solve → Win Celebration → Reset
```

## Error Handling & Validation

### Robust Features
- Rotation Locking: Prevents overlapping animations
- State Validation: Ensures consistent cube state
- Input Sanitization: Safe handling of user interactions
- Graceful Degradation: Maintains functionality when features are unavailable

##  Future Enhancements

### Planned Features
- Algorithm Solver: Step-by-step solving guidance
- Move History: Replay and undo functionality
- Customization: Cube color schemes and sizes
- Multiplayer: Competitive solving with friends
- Achievements: Unlockable milestones and challenges

### Technical Improvements
- Web Workers: Offload solving algorithms
- Service Worker: Progressive Web App capabilities
- WebXR: Virtual reality support
- Performance Monitoring: Advanced analytics and optimization

# License & Attribution

### Technologies Used
- Three.js: 3D graphics library ([MIT License](https://github.com/mrdoob/three.js/))
- Custom OrbitControls: Implementation based on Three.js examples

### Development
This project demonstrates advanced WebGL programming, modern JavaScript practices, and responsive web design principles. Suitable for educational purposes and personal use.

## Contributing
While this is a complete, self-contained project, suggestions and improvements are welcome. Key areas for contribution include:
- Performance optimizations
- Additional features and game modes
- Enhanced mobile experience
- Accessibility improvements

## Support
For issues or questions:
1. Ensure you're using a modern, WebGL-compatible browser
2. Check that JavaScript is enabled
3. Verify both files are in the same directory
4. Try refreshing the page if animations seem stuck

